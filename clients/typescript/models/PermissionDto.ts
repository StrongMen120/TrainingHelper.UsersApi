/* tslint:disable */
/* eslint-disable */
/**
 * Users API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: all
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoleDto } from './RoleDto';
import {
    RoleDtoFromJSON,
    RoleDtoFromJSONTyped,
    RoleDtoToJSON,
} from './RoleDto';
import type { UserDto } from './UserDto';
import {
    UserDtoFromJSON,
    UserDtoFromJSONTyped,
    UserDtoToJSON,
} from './UserDto';

/**
 * 
 * @export
 * @interface PermissionDto
 */
export interface PermissionDto {
    /**
     * 
     * @type {string}
     * @memberof PermissionDto
     */
    identifier: string;
    /**
     * 
     * @type {UserDto}
     * @memberof PermissionDto
     */
    user: UserDto;
    /**
     * 
     * @type {RoleDto}
     * @memberof PermissionDto
     */
    role: RoleDto;
}

/**
 * Check if a given object implements the PermissionDto interface.
 */
export function instanceOfPermissionDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "identifier" in value;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "role" in value;

    return isInstance;
}

export function PermissionDtoFromJSON(json: any): PermissionDto {
    return PermissionDtoFromJSONTyped(json, false);
}

export function PermissionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PermissionDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'identifier': json['identifier'],
        'user': UserDtoFromJSON(json['user']),
        'role': RoleDtoFromJSON(json['role']),
    };
}

export function PermissionDtoToJSON(value?: PermissionDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'identifier': value.identifier,
        'user': UserDtoToJSON(value.user),
        'role': RoleDtoToJSON(value.role),
    };
}

