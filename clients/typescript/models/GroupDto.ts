/* tslint:disable */
/* eslint-disable */
/**
 * Users API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: all
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GroupMembersDto } from './GroupMembersDto';
import {
    GroupMembersDtoFromJSON,
    GroupMembersDtoFromJSONTyped,
    GroupMembersDtoToJSON,
} from './GroupMembersDto';
import type { UserDto } from './UserDto';
import {
    UserDtoFromJSON,
    UserDtoFromJSONTyped,
    UserDtoToJSON,
} from './UserDto';

/**
 * 
 * @export
 * @interface GroupDto
 */
export interface GroupDto {
    /**
     * 
     * @type {number}
     * @memberof GroupDto
     */
    identifier: number;
    /**
     * 
     * @type {string}
     * @memberof GroupDto
     */
    name: string;
    /**
     * 
     * @type {UserDto}
     * @memberof GroupDto
     */
    trainer: UserDto;
    /**
     * 
     * @type {Array<GroupMembersDto>}
     * @memberof GroupDto
     */
    members: Array<GroupMembersDto>;
}

/**
 * Check if a given object implements the GroupDto interface.
 */
export function instanceOfGroupDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "identifier" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "trainer" in value;
    isInstance = isInstance && "members" in value;

    return isInstance;
}

export function GroupDtoFromJSON(json: any): GroupDto {
    return GroupDtoFromJSONTyped(json, false);
}

export function GroupDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'identifier': json['identifier'],
        'name': json['name'],
        'trainer': UserDtoFromJSON(json['trainer']),
        'members': ((json['members'] as Array<any>).map(GroupMembersDtoFromJSON)),
    };
}

export function GroupDtoToJSON(value?: GroupDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'identifier': value.identifier,
        'name': value.name,
        'trainer': UserDtoToJSON(value.trainer),
        'members': ((value.members as Array<any>).map(GroupMembersDtoToJSON)),
    };
}

