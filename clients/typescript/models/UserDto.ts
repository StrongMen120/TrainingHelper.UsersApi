/* tslint:disable */
/* eslint-disable */
/**
 * Users API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: all
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SexTypeDto } from './SexTypeDto';
import {
    SexTypeDtoFromJSON,
    SexTypeDtoFromJSONTyped,
    SexTypeDtoToJSON,
} from './SexTypeDto';

/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    identifier: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    secondName: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    phone: string;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    weight: number;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    height: number;
    /**
     * 
     * @type {SexTypeDto}
     * @memberof UserDto
     */
    sex: SexTypeDto;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    birthday: string;
}

/**
 * Check if a given object implements the UserDto interface.
 */
export function instanceOfUserDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "identifier" in value;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "secondName" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "phone" in value;
    isInstance = isInstance && "weight" in value;
    isInstance = isInstance && "height" in value;
    isInstance = isInstance && "sex" in value;
    isInstance = isInstance && "birthday" in value;

    return isInstance;
}

export function UserDtoFromJSON(json: any): UserDto {
    return UserDtoFromJSONTyped(json, false);
}

export function UserDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'identifier': json['identifier'],
        'firstName': json['firstName'],
        'secondName': json['secondName'],
        'email': json['email'],
        'phone': json['phone'],
        'weight': json['weight'],
        'height': json['height'],
        'sex': SexTypeDtoFromJSON(json['sex']),
        'birthday': json['birthday'],
    };
}

export function UserDtoToJSON(value?: UserDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'identifier': value.identifier,
        'firstName': value.firstName,
        'secondName': value.secondName,
        'email': value.email,
        'phone': value.phone,
        'weight': value.weight,
        'height': value.height,
        'sex': SexTypeDtoToJSON(value.sex),
        'birthday': value.birthday,
    };
}

